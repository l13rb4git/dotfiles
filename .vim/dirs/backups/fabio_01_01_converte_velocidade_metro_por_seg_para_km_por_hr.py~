"""Questão 01 da lista Algoritmos_Exercicio-01 (ESTRUTURA SEQUENCIAL)

    Leia uma velocidade em m/s, calcule e escreva esta velocidade em
    km/h. (Vkm/h = Vm/s * 3.6)h

Attributes:
    info_programa (str): Infomações sobre o que este programa deve fazer.
    info_entrada (str): Informações para que o usuário saiba o que se
        espera receber dele na entrada.
    velocidade_ms (int): Valor que representa uma velocidade em metro
        por sengundo. Esta é a velocidade que será convertida.
    velocidade_kmh (int): Representa a velocidade convertida para
        quilômetros por hora.

Raises:
    ValueError: Caso o input não seja uma string contendo somente um
        número inteiro.

"""
# Mensagens de interação com usuário
info_programa = "CONVERSOR DE VELOCIDADE \n" \
                "m/s (metros por segundos) para km/h (kilometros por hora). \n"

info_entrada = "Digite uma velocidade em m/s: \n"

# Mostrar na tela informações sobre o programa
print(info_programa)

# ENTRADA
velocidade_ms = int(input(info_entrada))

# COMPUTAÇÃO
velocidade_kmh = velocidade_ms * 3.6

# SAIDA
print("O valor digitado é equivalente a {0} km/s.".format(velocidade_kmh))


# Pythonic Version
# import shelve
# from os import path
# from tools import get_float


# def main():
#     print(info_programa)  # Informando o usuário o que o programa deve fazer

#     # Entrada do usuário, somente dados float.
#     velocidade_ms = get_float(info_entrada)

#     # Convertendo o valor em metros/segundo para kilometros/hora
#     # Formula: Vkm/h = Vm/s * 3.6
#     velocidade_kmh = converter_velocidade(velocidade_ms, 'm/s', 'km/h')

#     # Mostando na tela o valor convertido
#     print("O valor digitado é equivalente a {0} km/s".format(velocidade_kmh))


# def converter_velocidade(velocidade_inicial, unidade_inicial, unidade_desejada):
#     """Coverte uma velocidade para outra equivalente

#     A velocidade passada como parâmetro será convertida para o seu valor
#     correspondente em outra unidade de velocidade.

#     Unidades velocidade implementadas:
#         m/s:  metros/segundo
#         km/h: quilômetros/hora
#         mph:  milhas/hora
#         ft/s: pes/segundo (feets per hour)
#         nos:  nós

#     Args:
#         velocidade_inicial (float): Velocidade que será convertida.
#         unidade_inicial (str): Unidade de velocidade da velocidade_inicial
#         unidade_desejada (str): Unidade de velocidade para qual se
#             deseja converter a velocidade_inicial.

#     Return:
#         float: Velocidade já convertida para a unidade desejada.

#     Examples:
#         >>> converter_velocidade(10, 'm/s', 'km/h')
#         36.0
#         >>> converter_velocidade(10, 'm/s', 'mph')
#         22.369
#         >>> converter_velocidade(10, 'nos', 'ft/h')
#         16.877
#         >>> converter_velocidade(15, 'km/h', 'mph')
#         9.321

#     """
#     # Carregando um dicionario com as formulas necessárias para a
#     # conversão da velocidade
#     formulas = carregar_formulas()
#     # 'formula' é o valor que a velocidade inicial será mutiplicada
#     formula = formulas[unidade_inicial][unidade_desejada]
#     # Basta mutiplicar pela formula para obter a velocidade convertida
#     velocidade_convertida = velocidade_inicial * formula
#     return velocidade_convertida


# def carregar_formulas():
#     """Carrega da memoria de disco as fórmulas de conversão

#     O dicionario com as fórmulas usadas na função converter_velocidade()
#     está armazanado em disco no formato .db, para acessá-lo é ultizada
#     a função carregar_dicionario().
#     O trabalho desta função é evitar problemas ao acessar os dados do
#     dicionario na função converter_velocidade().

#     Returns:
#         dict: O dicionario com as fórmulas.

#     """
#     dicionario_formulas = carregar_dicionario("formulas_velocidades")
#     return dicionario_formulas['formulas_velocidades']


# def carregar_dicionario(nome_arquivo):
#     """Carrega para memoria ram um dicionario salvo em disco.

#     Consegue carregar para a memoria dicionarios armazanados em disco
#     utilizando o módulo shelve, este módulo também é responsável pelo o
#     armazenamento em si.

#     Há verificações para garantir que o arquivo com o dicionario esteja
#     na mesma pasta que este programa foi executado, por isso, se não for
#     possivel que estejam em pastas iguais modifique os parâmetros usados
#     no path.exits() colocando o caminho completo com o nome do arquivo
#     e o mesmo no shelve.open(), sempre ocultando o formato do arquivo.

#     Args:
#         nome_arquivo (str): O nome do arquivo que se pretende carregar.
#             Não se inclue o formato do arquivo (.db) SOMENTE O NOME.

#     Returns:
#         dict: O dicionario requisitado de fato.
#             Apesar do dicionario_shelve agir com um dicionario ele não
#             é do tipo 'dict' e sim 'shelve.DbDbfilenameShelf'.

#     Raises:
#         UnboundLocalError: Caso o arquivo que será lido não exita ou
#             não está na mesma pasta que este programa.

#     """
#     # O módulo path.exits() necessita também do formato do arquivo para
#     # encontrá-lo, enquanto o shelve.open() não.
#     # Por isso concateno à string nome_arquivo o formato dele (.db)
#     nome_com_formato = nome_arquivo + '.db'

#     try:
#         # True se o arquivo estiver na mesma pasta em que o programa.
#         if path.exists(nome_com_formato):
#             # Abrindo o arquivo .db
#             # O parâmetro 'flag = 'r'' é redundante, mas o comportamento
#             # do shelve.open() pode levar à crianção de um novo arquivo.
#             # O valor atribuído a dicionario_shelve NÃO É UM TIPO 'DICT'
#             # mas sim um tipo 'shelve.DbDbfilenameShelf'.
#             dicionario_shelve = shelve.open(nome_arquivo, flag = 'r')
#         else:
#             raise UnboundLocalError

#     except UnboundLocalError:
#         print("Desculpe, arquivo com os dados das fórmulas não foi encontrado.")

#     else:
#         # Copiando os valores do dicionario_shelve para obter um
#         # dicionario "verdadeiro".
#         dicionario_carregado = copiar_dicionario(dicionario_shelve)
#         dicionario_shelve.close
#         return dicionario_carregado


# def copiar_dicionario(dicionario):
#     """Faz uma copia do dicionario e seus valores.

#     Args:
#         dicionario (dict): O dicionario quer se fará a copia.

#     Returns:
#         dict: A copia do dicionario.

#     """
#     dicionario_copia = {}
#     # O metódo keys() retorna uma vizualização das chaves do dicionario
#     chaves_dicionario = dicionario.keys()

#     for chave in chaves_dicionario:
#         dicionario_copia[chave] = dicionario[chave]

#     return dicionario_copia


# if __name__ == '__main__':
#     main()


# One-line Version
# print("O valor digitado é equivalente a {0} km/s".format(int(input("Digite uma velocidade em m/s: \n")) * 3.6))


# OOP Version


# class ConversorDeVelocidade(object):
#     """Coverte uma velocidade para outra equivalente

#     A velocidade passada como parâmetro será convertida para o seu valor
#     correspondente em outra unidade de velocidade.
#     A unidade de velocidade para qual o valor inicial será convertido
#     advém do método utilizado para a conversão.

#     Attributes:
#         velocidade_inicial (float): Velocidade ainda não convertida
#         velocidade_kmh (float): Valor equivalente à velocidade inicial
#             convertida para quilômetros por hora.

#     Methods:
#         metro_s_para_quilometro_h: Responsável pela conversão de
#             velocidades em metro por segundo para quilômetro por
#             hora.

#     Example:
#         >>> conversor = ConversorDeVelocidade(20)
#         >>> conversor.metro_s_para_quilometro_h()
#         72.0

#     """

#     def __init__(self, velocidade_inicial):
#         """
#         Args:
#             velocidade_inicial (float): Entrada do usuário.
#                 velocidade que será convertida.

#         """
#         self.velocidade_inicial = velocidade_inicial

#     def metro_s_para_quilometro_h(self):
#         """Converte metro/s para quilômetro/h

#         Responsável pela conversão de velocidades em metro por segundo
#         para quilômetro por hora ultilizando a fórmula
#         Vkm/h = Vm/s * 3.6.

#         Args:
#             Esperara-se que ao utilizar esse método a velocidade
#             passada como parâmetro esteja em metros por sesgundo.

#         Returns:
#             float: O correspondente à velocidade_inicial em km/h.

#         """
#         self.velocidade_kmh = self.velocidade_inicial * 3.6
#         return self.velocidade_kmh


# if __name__ == '__main__':
#     # Formatando as strings que contém informações para o usuário.
#     mensagem = "{0}\n{1}".format(info_programa, info_entrada)
#     # Entrada do usuário, somente dados float.
#     velocidade_ms = get_float(mensagem)

#     conversor = ConversorDeVelocidade(velocidade_ms)
#     velocidade_convertida = conversor.metro_s_para_quilometro_h()
#     print("O valor digitado é equivalente a {0} km/s".format(
#                                                         velocidade_convertida))
