class SingletonObject(object):
    class __SingletonObjct():
        def __init__(self):
            self.val = None

        def __str__(self):
            return "{0!r} {1}".format(self, self.val)

    class Logger(object):
        def write_log(self, level, msg):
            with open(self.file_name, "a") as log_file:
                log_file.write("[{0}] {1} \n".format(level, msg))

        def __init__(self, file_name):
            self.file_name = file_name

        def critical(self, msg):
            self.write_log("CRITICAL", msg)

        def error(self, msg):
            self.write_log("ERROR", msg)

        def warn(self, msg):
            self.write_log("WARN", msg)

        def info(self, msg):
            self.write_log("INFO", msg)

        def debug(self, msg):
            self.write_log("DEBUG", msg)

    instance = None

    def __new__(cls):
        if not SingletonObject.instance:
            SingletonObject.instance = SingletonObject.__SingletonObjct()

        return SingletonObject.instance

    def __getattr__(self, name):
        return getattr( self.instance, name )

    def __setattr__(self, name):
        return getattr( self.instance, name )
